{"version":3,"sources":["reportWebVitals.ts","types/actionType.ts","components/ODView.tsx","components/MapView.tsx","components/Calendar.tsx","components/SmallMapView.tsx","components/rect.tsx","components/OverView.tsx","action/index.ts","components/TableView.tsx","components/load.tsx","components/ModelView.tsx","components/Login.tsx","App.tsx","reducer/index.ts","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","CHANGE_LOADING_SHOW","UPDATED_RECT","ODView","props","data","this","max","Math","d","lines","texts","i","push","width","height","style","margin","map","value","index","x","y","transform","fill","fontSize","x1","x2","y1","y2","stroke","strokeWidth","Component","MapView","myChart","state","stations","links","route","station","timeStr","ODData","top","bottom","isIn","colors","id","backgroundColor","boxShadow","boxSizing","float","onClick","console","log","onMouseOver","setState","onMouseOut","cx","cy","r","updataODView","updataPieView","e","target","change","lineHeight","marginLeft","color","type","name","marginTop","onChange","axios","get","res","echarts","document","getElementById","month","split","options","title","text","left","textStyle","tooltip","trigger","legend","orient","series","radius","avoidLabelOverlap","itemStyle","borderRadius","label","show","position","emphasis","fontWeight","labelLine","setOption","Calendar","year","day","timeList","updataRect","calendarData","userSelect","className","textAlign","parseInt","SmallMapView","changeStation","Rect","rectHeight","in_data","out_data","times","k","legends","Fragment","connect","ownProps","OverView","isMonth","updataSankey","triggerOn","layout","right","lineStyle","fontFamily","focus","resIn","resOut","indexOf","length","mapDispatchToProps","TableView","inStation","outStation","inRoute","outRoute","birthyear","sex","inTime","outTime","tableData","tableDataBySelect","sum","pagination","paginationList","s","toFixed","tableSelections","search","padding","borderSpacing","display","min","href","preventDefault","selections","isSame","key","includes","Load","isShow","src","alt","ModelView","xs","originData","modelData","isLoading","changeOriginData","setTimeout","model","forEach","option","toolbox","feature","dataZoom","yAxisIndex","dataView","readOnly","magicType","restore","saveAsImage","xAxis","boundaryGap","axisLabel","yAxis","random","floor","Login","password","zIndex","background","onKeyDown","code","login","alert","App","isLogin","path","backgroundImage","to","exact","component","changeLoadingShow","initStore","combineReducer","combineReducers","action","reducer","store1","ReactDOM","render","store","createStore"],"mappings":"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","file":"static/js/main.5b7b6133.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/**\r\n * 改变加载动画的显示状态\r\n */\r\nexport const CHANGE_LOADING_SHOW = 'CHANGE_LOADING_SHOW'\r\n\r\n/**\r\n * 更新柱状图\r\n */\r\nexport const UPDATED_RECT = 'UPDATED_RECT'","import React, {Component} from 'react';\r\n\r\ninterface ODViewProps {\r\n    data: {\r\n        top: Array<number>,\r\n        bottom: Array<number>\r\n    }\r\n}\r\ninterface ODViewState {\r\n    \r\n}\r\nclass ODView extends Component <ODViewProps, ODViewState>{\r\n    public constructor(props : ODViewProps) {\r\n        super(props)\r\n    }\r\n    \r\n    public render() : JSX.Element {\r\n        const {data} = this.props\r\n        let max = Math.max(...data['top'], ...data['bottom'])\r\n        if (max % 10 > 5) {\r\n            max += (5 - max % 5)\r\n        } else if (max % 10 < 5 && max % 10 !== 0) {\r\n            max += (5 - max % 5)\r\n        }\r\n        const d = 140 / max\r\n        const lines:Array<number> = [160]\r\n        const texts:Array<number> = [0]\r\n        for (let i = 1; i <= 5; i++) {\r\n            lines.push(160 - i * d * max / 5)\r\n            lines.push(160 + i * d * max / 5)\r\n            texts.push(i * max / 5)\r\n            texts.push(i * max / 5)\r\n        }\r\n        const xs:Array<number> = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]\r\n        return (\r\n            <svg width='440px' height='340px' style={{\r\n                // backgroundColor: 'white',\r\n                margin: '20px 0px 20px 20px'\r\n            }}>\r\n                {\r\n                    xs.map((value: number, index: number) => (\r\n                        <text key={index} x={20 + index * 17.5} y={310}\r\n                        transform={'rotate(90 ' + (20 + index * 17.5) + ',' + '310)'}\r\n                        style={{ \r\n                            fill: 'white',\r\n                            fontSize: '12px',\r\n                            // transform: \r\n                        }}>\r\n                            {value + '时'}\r\n                        </text>\r\n                    ))\r\n                }\r\n                {\r\n                    lines.map((value: number, index: number) => (\r\n                        <line x1 = {20} x2={20 + 19*24} y1={value} y2={value} key={index}\r\n                            style={{\r\n                                // fill: 'no',\r\n                                stroke: 'white',\r\n                                strokeWidth: 1\r\n                            }}\r\n                        \r\n                        />\r\n                    ))\r\n                }\r\n                {\r\n                    texts.map((value: number, index: number) => (\r\n                        <text key={index} x={0} y={lines[index]+ 2} style={{ \r\n                            fill: 'white',\r\n                            fontSize: '13px'\r\n                        }}>\r\n                            {value}\r\n                        </text>\r\n                    ))\r\n                }\r\n                {\r\n                    this.props.data['top'].map((value: number, index: number) => (\r\n                        <rect x={20 + index * 17.5} y={160 - value * d} key={index}\r\n                            fill='rgb(233,103,196)' height={value * d} width={5}\r\n                        />\r\n                    ))\r\n                }\r\n                {\r\n                    this.props.data['bottom'].map((value: number, index: number) => (\r\n                        <rect x={20 + index * 17.5} y={160} key={index}\r\n                            fill='rgb(87,120,245)' height={value * d} width={5}\r\n                        />\r\n                    ))\r\n                }\r\n            </svg>\r\n        )\r\n    }\r\n}\r\nexport default ODView;","import React, {Component} from 'react';\r\nimport axios, { AxiosResponse } from 'axios'\r\nimport * as echarts from 'echarts'\r\n\r\nimport '../css/mapView.css'\r\nimport ODView from './ODView';\r\nimport { ECharts, EChartsResponsiveOption } from 'echarts';\r\nimport change from '../data/change.json'\r\n\r\n\r\ninterface stationType {\r\n\t\"station\": string,\r\n    \"x\": number,\r\n    \"y\": number,\r\n    \"route\": number\r\n}\r\n\r\ninterface linkType {\r\n\t\"last\" : string,\r\n\t\"next\": string,\r\n\t\"route\": number,\r\n\t\"lastx\": number,\r\n\t\"lasty\": number,\r\n\t\"nextx\": number,\r\n\t\"nexty\": number\r\n}\r\n\r\ninterface MapViewProps {\r\n    \r\n}\r\ninterface MapViewState {\r\n    stations: Array<stationType>,\r\n\tlinks: Array<linkType>,\r\n    route: number,\r\n    station: string,\r\n    timeStr: string,\r\n    ODData: {\r\n        top: Array<number>,\r\n        bottom: Array<number>\r\n    },\r\n    isIn: boolean\r\n}\r\nclass MapView extends Component <MapViewProps, MapViewState>{\r\n    private myChart: ECharts | null;\r\n    public constructor(props : MapViewProps) {\r\n        super(props)\r\n        this.myChart = null;\r\n        this.state = {\r\n\t\t\t// isLogin: true,\r\n\t\t\tstations: [],\r\n\t\t\tlinks: [],\r\n            route: -1,\r\n            station: 'Sta18',\r\n            timeStr: '2020-01-01',\r\n            ODData: {\r\n                top: [], bottom: []\r\n            },\r\n            isIn: true\r\n\t\t}\r\n    }\r\n    \r\n    public render() : JSX.Element {\r\n        const colors = {\r\n            \"0\": 'rgb(255,166,192)', \"1\": 'rgb(147,254,225)', \"2\": 'rgb(254,253,160)',\r\n            \"3\": 'rgb(252,206,16)', \"4\": 'rgb(46,199,201)', \"5\": 'rgb(232,124,37)',\r\n            \"10\": 'rgb(193,35,43)', \"11\": 'rgb(43,130,29)', \"12\": 'rgb(230,105,34)'\r\n        }\r\n        const routeText:Array<Array<string>> = [\r\n            ['线路1', '80px', '250px'], ['线路11', '50px', '100px'], ['线路10', '320px', '100px'], ['线路12', '290px', '500px'], \r\n            ['线路5', '480px', '540px'], ['线路2', '400px', '680px'], ['线路3', '940px', '700px'], ['线路4', '1050px', '190px']\r\n        ]\r\n        return (\r\n            <div id='map-view'>\r\n                <svg width='1200px' height='770px' style={{\r\n                    backgroundColor: 'rgba(16,54,87,0.5)',\r\n                    // border: '1px solid #345f92',\r\n                    boxShadow: '-8px 0px 10px #034c6a inset, 8px 0px 10px #034c6a inset',\r\n                    boxSizing: 'border-box',\r\n                    float: 'left'\r\n                }}>\r\n                    \r\n                    {\r\n                        this.state.links.map((value: linkType, index: number) => (\r\n                            <line x1={value['lastx']*1.2 - 50} x2={value['nextx']*1.2 - 50} \r\n                                y1={value['lasty'] - 20} y2={value['nexty'] - 20}\r\n                                style={{\r\n                                    strokeWidth: value['route'] === this.state.route ? '4px' : '2px',\r\n                                    // stroke: '#345f92',\r\n                                    stroke: value['route'] === this.state.route ? '#345f92' : (colors as any)[value['route']]\r\n                                }}\r\n                                onClick={\r\n                                    () => {\r\n                                        console.log(value)\r\n                                    }\r\n                                }\r\n                                onMouseOver={\r\n                                    () => {\r\n                                        this.setState({route: value['route']})\r\n                                    }\r\n                                }\r\n                                onMouseOut={\r\n                                    () => {\r\n                                        this.setState({route: -1})\r\n                                    }\r\n                                }\r\n                            />\r\n                        ))\r\n                    }\r\n                    {\r\n                        this.state.stations.map((value: stationType, index: number) => (\r\n                            <circle cx={value['x']*1.2 - 50} cy={value['y']-20} r='4px' \r\n                                style={{\r\n                                    fill: 'white',\r\n                                    stroke: '#345f92',\r\n                                    strokeWidth: '2px'\r\n                                }}\r\n                                onClick={\r\n                                    () => {\r\n                                        console.log(value['route'])\r\n                                        this.setState({station: value['station']}, () => {\r\n                                            this.updataODView()\r\n                                            this.updataPieView()\r\n                                        })\r\n                                    }\r\n                                }\r\n                                onMouseOver={\r\n                                    (e) => {\r\n                                        this.setState({route: value['route']})\r\n                                        // console.log((e.target as any).style);\r\n                                        ;(e.target as any).style.r = '7px'\r\n                                        // document.getElementById('box')!.style.top = e.screenY + 'px'\r\n                                        // document.getElementById('box')!.style.left = e.screenX + 'px'\r\n                                        // document.getElementById('box')!.style.display = 'block'\r\n                                        // document.getElementById('box')!.innerHTML = value['station']\r\n                                        \r\n\r\n                                    }\r\n                                }\r\n                                onMouseOut={\r\n                                    (e) => {\r\n                                        this.setState({route: -1})\r\n                                        ;(e.target as any).style.r = '4px'\r\n                                        // document.getElementById('box')!.style.display = 'none'\r\n                                    }\r\n                                }\r\n                            />\r\n                        ))\r\n                    }\r\n                    {\r\n                        this.state.stations.map((value: stationType, index: number) => (\r\n                            <text x={value['x']*1.2 - 50} y={value['y']-25} style={{\r\n                                fill: '#fff',\r\n                                fontSize: '10px'\r\n                            }}>\r\n                                {(change as any)[value['station']]}\r\n                            </text>\r\n                        ))\r\n                    }\r\n                    {\r\n                        routeText.map((value: Array<string>, index: number) => (\r\n                            <text x={value[1]} y={value[2]} style={{\r\n                                fill: '#fff',\r\n                                fontSize: '15px'\r\n                            }}>\r\n                                {value[0]}\r\n                            </text>\r\n                        ))\r\n                    }\r\n                </svg>\r\n                {/* <div id='box' style={{\r\n                    width: '70px',\r\n                    height: '30px',\r\n                    backgroundColor: '#030829',\r\n                    // backgroundColor: 'red',\r\n                    color: '#fff',\r\n                    position: 'absolute',\r\n                    top: '300px',\r\n                    left: '100px',\r\n                    textAlign: 'center',\r\n                    lineHeight: '30px',\r\n                    zIndex: 99,\r\n                    display: 'none'\r\n                }}>\r\n                    Sta18\r\n                </div> */}\r\n                <div style={{\r\n                    fontSize: '18px',\r\n                    height: '30px',\r\n                    // backgroundColor: 'red',\r\n                    lineHeight: '30px',\r\n                    float: 'left',\r\n                    marginLeft: '10px',\r\n                    color: 'white'\r\n                }}>时间：</div>\r\n                <input type=\"date\" name=\"\" id=\"table-find\" value={this.state.timeStr} \r\n                style={{\r\n                    marginTop: '3px'\r\n                }}\r\n                onChange={\r\n                    (e) => {\r\n                        // e.target.value\r\n                        // console.log(e.target.value);\r\n                        this.setState({timeStr: e.target.value}, () => {\r\n                            this.updataODView()\r\n                            this.updataPieView()\r\n                        })\r\n                    }\r\n                }/>\r\n                <div id='changePie' onClick={\r\n                    () => {\r\n                        this.setState({isIn: !this.state.isIn}, () => {\r\n                            this.updataPieView()\r\n                        })\r\n                    }\r\n                }>\r\n                    切换\r\n                </div>\r\n                <div id='OD-view'>\r\n                    <div id=\"OD-view-title\">\r\n                        {(change as any)[this.state.station]}断面流量分析\r\n                    </div>\r\n                    <ODView data={this.state.ODData}/>\r\n                </div>\r\n                <div id='ages-view'>\r\n                    <div id='ages-pie'>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    public componentDidMount():void {\r\n        axios.get('/data/stations.json').then((res: AxiosResponse<Array<stationType>>) => {\r\n\t\t\t// console.log(res);\r\n\t\t\tthis.setState({stations: res.data})\r\n\t\t})\r\n\t\taxios.get('/data/newlinks.json').then((res: AxiosResponse<Array<linkType>>) => {\r\n\t\t\t// console.log(res);\r\n\t\t\tthis.setState({links: res.data})\r\n\t\t})\r\n        this.updataODView()\r\n        this.updataPieView()\r\n    }\r\n\r\n    private updataODView(): void {\r\n        axios.get('/data/ODDAta.json').then((res: AxiosResponse<Array<any>>) => {\r\n\t\t\t// console.log(res);\r\n\t\t\tthis.setState({ODData: (res.data as any)[this.state.timeStr][this.state.station]})\r\n\t\t})\r\n    }\r\n\r\n    private updataPieView(): void {\r\n        this.myChart = echarts.init(document.getElementById('ages-pie') as HTMLDivElement);\r\n        const month:string = this.state.timeStr.split('-')[1]\r\n        axios.get('http://localhost:3000/data/ages_month.json').then((res:AxiosResponse<any>) => {\r\n            const options = {\r\n                title: {\r\n                    text: month + '月' + (change as any)[this.state.station] + (this.state.isIn ? '进站' : '出站') + '年龄分布',\r\n                    left: 'center',\r\n                    textStyle: {\r\n                        color: '#fff'\r\n                    }\r\n                },\r\n                tooltip: {\r\n                    trigger: 'item'\r\n                },\r\n                legend: {\r\n                    top: '5%',\r\n                    orient: 'vertical',\r\n                    left: 'left',\r\n                    textStyle: {\r\n                        color: '#fff'\r\n                    }\r\n                },\r\n                series: [\r\n                    {\r\n                        name: '访问来源',\r\n                        type: 'pie',\r\n                        radius: ['40%', '70%'],\r\n                        avoidLabelOverlap: false,\r\n                        itemStyle: {\r\n                            borderRadius: 10,\r\n                            // borderColor: '#fff',\r\n                            // borderWidth: 2\r\n                        },\r\n                        label: {\r\n                            show: false,\r\n                            position: 'center'\r\n                        },\r\n                        emphasis: {\r\n                            label: {\r\n                                show: true,\r\n                                fontSize: '15',\r\n                                fontWeight: 'bold',\r\n                                color: '#fff'\r\n                            }\r\n                        },\r\n                        labelLine: {\r\n                            show: false\r\n                        },\r\n                        data: res.data[month][this.state.station][this.state.isIn ? 'in' : 'out']\r\n                    }\r\n                ]\r\n            };\r\n            this.myChart?.setOption(options as EChartsResponsiveOption)\r\n        })\r\n    }\r\n}\r\nexport default MapView;","import React, {Component} from 'react';\r\nimport '../css/calendar.css'\r\nimport calendarData from './../data/calendar.json'\r\n\r\n\r\ninterface CalendarProps {\r\n    updataRect: (month:number, day:number) => void;\r\n}\r\ninterface CalendarState {\r\n    year: number,\r\n    month: number,\r\n    day: number\r\n}\r\nclass Calendar extends Component <CalendarProps, CalendarState>{\r\n    public constructor(props : CalendarProps) {\r\n        super(props)\r\n        this.state = {\r\n            year: 2020,\r\n            month: 1,\r\n            day: 1\r\n        }\r\n    }\r\n    \r\n    public render() : JSX.Element {\r\n        const titles:Array<string> = ['一', '二', '三', '四', '五', '六', '日']\r\n        const position:Array<number> = [0, 3, 6, 7, 3, 5, 1, 3]\r\n        const {year, month, day} = this.state\r\n        const {updataRect} = this.props\r\n        const timeList:Array<string> = (calendarData as any)['' + month]\r\n        return (\r\n            <div style={{ \r\n                margin: '40px 20px 20px 20px',\r\n                height: '290px',\r\n                width: '370px',\r\n                // backgroundColor: 'white',\r\n                color: 'white',\r\n                userSelect: 'none'\r\n            }}>\r\n                <div style={{\r\n                    width: '100%',\r\n                    // backgroundColor: 'red',\r\n                    height: '30px',\r\n                    lineHeight: '30px'\r\n                }}>\r\n                    <span style={{\r\n                        fontSize: '17px',\r\n                        marginLeft: '15px'\r\n                    }}>\r\n                        {year}年{month}月\r\n                    </span>\r\n                    <span className='change-month' onClick={\r\n                        () => {\r\n                            if (month === 7) return;\r\n                            if(month === 12) {\r\n                                this.setState({\r\n                                    year: year + 1,\r\n                                    month: 1\r\n                                })\r\n                            } else {\r\n                                this.setState({month: month + 1})\r\n                            }\r\n                        }\r\n                    }>\r\n                        ∧\r\n                    </span>\r\n                    <span className='change-month' onClick={\r\n                        () => {\r\n                            if (month === 1) return;\r\n                            if(month === 1) {\r\n                                this.setState({\r\n                                    year: year - 1,\r\n                                    month: 12\r\n                                })\r\n                            } else {\r\n                                this.setState({month: month - 1})\r\n                            }\r\n                        }\r\n                    }>\r\n                        ∨\r\n                    </span>\r\n                </div>\r\n                {\r\n                    titles.map((value: string, index: number) => (\r\n                        <div style={{\r\n                            // backgroundColor: 'blue',\r\n                            width: 100 / 7 + '%',\r\n                            height: '40px',\r\n                            float: 'left',\r\n                            textAlign: 'center',\r\n                            lineHeight: '40px',\r\n                            fontSize: '16px',\r\n                            // border: '0px solid black'\r\n                        }} key={index}>\r\n                            {value}\r\n                        </div>\r\n                    ))\r\n                }\r\n                {\r\n                    timeList.map((value: string, index: number) => {\r\n                        return (\r\n                            <div className={'calendar-number ' + (value === '' + day ? 'calendar-number-select' : '') } style={{\r\n                                marginLeft: index === 0 ? (position[month] - 1 ) * (370 / 7) + 'px' : '0px'\r\n                            }} key={index} onClick={\r\n                                () => {\r\n                                    this.setState({day: parseInt(value)})\r\n                                }\r\n                            }>\r\n                                {value}\r\n                            </div>\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n\r\n    public componentDidUpdate(): void {\r\n        this.props.updataRect(this.state.month, this.state.day)\r\n    }\r\n}\r\nexport default Calendar;","import React, {Component} from 'react';\r\nimport axios, { AxiosResponse } from 'axios'\r\nimport '../css/mapView.css'\r\nimport change from '../data/change.json'\r\n\r\n\r\ninterface stationType {\r\n\t\"station\": string,\r\n    \"x\": number,\r\n    \"y\": number,\r\n    \"route\": number\r\n}\r\n\r\ninterface linkType {\r\n\t\"last\" : string,\r\n\t\"next\": string,\r\n\t\"route\": number,\r\n\t\"lastx\": number,\r\n\t\"lasty\": number,\r\n\t\"nextx\": number,\r\n\t\"nexty\": number\r\n}\r\n\r\ninterface SmallMapViewProps {\r\n    changeStation: (station: string) => void\r\n}\r\ninterface SmallMapViewState {\r\n    stations: Array<stationType>,\r\n\tlinks: Array<linkType>,\r\n    route: number,\r\n    station: string\r\n}\r\nclass SmallMapView extends Component <SmallMapViewProps, SmallMapViewState>{\r\n    public constructor(props : SmallMapViewProps) {\r\n        super(props)\r\n        this.state = {\r\n\t\t\t// isLogin: true,\r\n\t\t\tstations: [],\r\n\t\t\tlinks: [],\r\n            route: -1,\r\n            station: 'Sta18'\r\n\t\t}\r\n    }\r\n    \r\n    public render() : JSX.Element {\r\n        const colors = {\r\n            \"0\": 'rgb(255,166,192)', \"1\": 'rgb(147,254,225)', \"2\": 'rgb(254,253,160)',\r\n            \"3\": 'rgb(252,206,16)', \"4\": 'rgb(46,199,201)', \"5\": 'rgb(232,124,37)',\r\n            \"10\": 'rgb(193,35,43)', \"11\": 'rgb(43,130,29)', \"12\": 'rgb(230,105,34)'\r\n        }\r\n        const routeText:Array<Array<string>> = [\r\n            ['线路1', '10px', '200px'], ['线路11', '10px', '40px'], ['线路10', '150px', '60px'], ['线路12', '120px', '450px'], \r\n            ['线路5', '250px', '490px'], ['线路2', '200px', '630px'], ['线路3', '550px', '620px'], ['线路4', '650px', '150px']\r\n        ]\r\n        return (\r\n            <>\r\n            <svg width='768px' height='638px' style={{\r\n                // backgroundColor: 'rgba(16,54,87,0.5)',\r\n                // border: '1px solid #345f92',\r\n                // boxShadow: '-8px 0px 10px #034c6a inset, 8px 0px 10px #034c6a inset',\r\n                // boxSizing: 'border-box'\r\n                margin: '20px'\r\n            }}>\r\n                \r\n                {\r\n                    this.state.links.map((value: linkType, index: number) => (\r\n                        <line key={index} x1={(value['lastx'] - 100)* 0.8} x2={(value['nextx'] - 100) * 0.8} \r\n                            y1={(value['lasty'] - 60)*0.99} y2={(value['nexty'] - 60)*0.99}\r\n                            style={{\r\n                                strokeWidth: value['route'] === this.state.route ? '4px' : '2px',\r\n                                // stroke: '#345f92',\r\n                                stroke: value['route'] === this.state.route ? '#345f92' : (colors as any)[value['route']]\r\n                            }}\r\n                            onClick={\r\n                                () => {\r\n                                    console.log(value)\r\n                                }\r\n                            }\r\n                            onMouseOver={\r\n                                () => {\r\n                                    this.setState({route: value['route']})\r\n                                }\r\n                            }\r\n                            onMouseOut={\r\n                                () => {\r\n                                    this.setState({route: -1})\r\n                                }\r\n                            }\r\n                        />\r\n                    ))\r\n                }\r\n                {\r\n                    this.state.stations.map((value: stationType, index: number) => (\r\n                        <circle key={index} cx={(value['x'] - 100) * 0.8} cy={(value['y']-60)*0.99} \r\n                            r={this.state.station === value['station'] ? '7px' : '4px'} \r\n                            style={{\r\n                                fill: 'white',\r\n                                stroke: '#345f92',\r\n                                strokeWidth: '2px'\r\n                            }}\r\n                            onClick={\r\n                                () => {\r\n                                    console.log(value)\r\n                                    this.props.changeStation(value['station'])\r\n                                }\r\n                            }\r\n                            onMouseOver={\r\n                                (e) => {\r\n                                    this.setState({route: value['route'], station: value['station']})\r\n                                    // document.getElementById('box')!.style.top = e.screenY + 'px'\r\n                                    // document.getElementById('box')!.style.left = e.screenX + 'px'\r\n                                    // document.getElementById('box')!.style.display = 'block'\r\n                                    // document.getElementById('box')!.innerHTML = value['station']\r\n                                    // console.log(document.getElementById('box'));\r\n                                }\r\n                            }\r\n                            onMouseOut={\r\n                                () => {\r\n                                    this.setState({route: -1, station: ''})\r\n                                    // document.getElementById('box')!.style.display = 'none'\r\n\r\n                                }\r\n                            }\r\n                            \r\n                        />\r\n                    ))\r\n                }\r\n                {\r\n                    this.state.stations.map((value: stationType, index: number) => (\r\n                        <text x={(value['x'] - 100) * 0.8} y={(value['y']-65)*0.99} style={{\r\n                            fill: '#fff',\r\n                            fontSize: '10px'\r\n                        }}>\r\n                            {(change as any)[value['station']]}\r\n                        </text>\r\n                    ))\r\n                }\r\n                {\r\n                    routeText.map((value: Array<string>, index: number) => (\r\n                        <text x={value[1]} y={value[2]} style={{\r\n                            fill: '#fff',\r\n                            fontSize: '15px'\r\n                        }}>\r\n                            {value[0]}\r\n                        </text>\r\n                    ))\r\n                }\r\n            </svg>\r\n            {/* <div id='box' style={{\r\n                    width: '70px',\r\n                    height: '30px',\r\n                    // backgroundColor: '#030829',\r\n                    backgroundColor: 'red',\r\n                    color: '#fff',\r\n                    position: 'absolute',\r\n                    top: '300px',\r\n                    left: '100px',\r\n                    textAlign: 'center',\r\n                    lineHeight: '30px',\r\n                    zIndex: 99,\r\n                    display: 'none'\r\n                }}>\r\n                    Sta18\r\n                </div> */}\r\n            </>\r\n        )\r\n    }\r\n\r\n    public componentDidMount():void {\r\n        axios.get('/data/stations.json').then((res: AxiosResponse<Array<stationType>>) => {\r\n\t\t\t// console.log(res);\r\n\t\t\tthis.setState({stations: res.data})\r\n\t\t})\r\n\t\taxios.get('/data/newlinks.json').then((res: AxiosResponse<Array<linkType>>) => {\r\n\t\t\t// console.log(res);\r\n\t\t\tthis.setState({links: res.data})\r\n\t\t})\r\n    }\r\n}\r\nexport default SmallMapView;","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux'\r\n\r\nimport {storeType, rectType} from './../types/propsType'\r\n\r\n\r\ninterface RectProps extends rectType {\r\n    rectHeight: number\r\n}\r\ninterface RectState {\r\n    \r\n}\r\nclass Rect extends Component <RectProps, RectState>{\r\n    public constructor(props : RectProps) {\r\n        super(props)\r\n    }\r\n    \r\n    public render() : JSX.Element {\r\n        const {rectHeight} = this.props\r\n        const {in_data, out_data, times} = this.props\r\n        const max = Math.max(...in_data, ...out_data)\r\n        const lines:Array<number> = [1, 2, 3, 4, 5, 6]\r\n        const k = 200 / (max * 1.2)\r\n        const legends:Array<[string, string]> = [['rgb(0, 152, 131)', '进站'], ['rgb(230,105,34)', '出站']]\r\n        // console.log(`times`, times)\r\n        return (\r\n            <svg width='370px' height={rectHeight + 'px'} style={{\r\n                marginTop: '5px',\r\n                // backgroundColor: 'red',\r\n                // border: '1px solid #345f92',\r\n                margin: '20px 20px 20px 20px'\r\n            }}>\r\n                {/* 图例 */}\r\n                {\r\n                    legends.map((value: [string, string], index: number) => (\r\n                        <React.Fragment>\r\n                            <circle key={index} cx={270+index*50} cy={10} r={5} style={{\r\n                                fill: value[0]\r\n                            }}/>\r\n                        <text key={index} x={280+index*50} y={14}\r\n                        style={{ \r\n                            fill: 'white',\r\n                            fontSize: '10px'\r\n                        }}>\r\n                            {value[1]}\r\n                        </text>\r\n                        </React.Fragment>\r\n                    ))\r\n                }\r\n                {/* 横线 */}\r\n                {\r\n                    lines.map((value: number, index: number) => (\r\n                        <line x1='30px' x2='360px' key={index}\r\n                            y1={rectHeight-30-index*40 + 'px'} y2={rectHeight-30-index*40 + 'px'}\r\n                            // fill='#345f92'\r\n                            style={{\r\n                                stroke: 'white',\r\n                                strokeWidth: '1px'\r\n                            }}\r\n                        />\r\n                    ))\r\n                }\r\n                {/* 进站 */}\r\n                {\r\n                    in_data.map((value: number, index: number) => (\r\n                        <rect x={35+index*45+'px'} y={rectHeight-30-k*value+'px'}\r\n                            height={k*value+'px'} width='15px' key={index}\r\n                            style={{\r\n                                fill: legends[0][0],\r\n                                stroke: 'white',\r\n                                strokeWidth: '1px'\r\n                            }}\r\n                        />\r\n                    ))\r\n                }\r\n                {/* 出站 */}\r\n                {\r\n                    out_data.map((value: number, index: number) => (\r\n                        <rect x={55+index*45+'px'} y={rectHeight-30-k*value+'px'}\r\n                            height={k*value+'px'} width='15px' key={index}\r\n                            style={{\r\n                                fill: legends[1][0],\r\n                                stroke: 'white',\r\n                                strokeWidth: '1px'\r\n                            }}\r\n                        />\r\n                    ))\r\n                }\r\n                {/* 纵坐标 */}\r\n                {\r\n                    lines.map((value: number, index: number) => (\r\n                        <text key={index} x='2px' y={rectHeight-25-index*40 + 'px'}\r\n                            style={{ \r\n                                fill: 'white',\r\n                                fontSize: '10px'\r\n                        }}>\r\n                            {index * max / 5}\r\n                        </text>\r\n                    ))\r\n                }\r\n                {/* 横坐标 */}\r\n                {\r\n                    times.map((value: string, index: number) => (\r\n                        <text key={index} x={35+index*45+'px'} y={rectHeight-15}\r\n                            style={{ \r\n                                fill: 'white',\r\n                                fontSize: '10px'\r\n                        }}>\r\n                            {value}\r\n                        </text>\r\n                    ))\r\n                }\r\n            </svg>\r\n        )\r\n    }\r\n\r\n}\r\nconst mapStateToProps = (state:storeType, ownProps?: any) => {\r\n\tconsole.log('dsd',state.Rect);\r\n\treturn {\r\n        ...ownProps,\r\n        ...state.Rect\r\n\t}\r\n}\r\n// const mapDispatchToProps = {\r\n\r\n// }\r\nexport default connect(mapStateToProps)(Rect);\r\n","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport * as echarts from 'echarts'\r\n\r\nimport '../css/overView.css'\r\nimport Calendar from './Calendar';\r\nimport SmallMapView from './SmallMapView';\r\nimport Rect from './rect'\r\nimport {updataRect} from './../action'\r\nimport axios, { AxiosResponse } from 'axios';\r\nimport calendarData from './../data/calendar.json'\r\nimport { ECharts, EChartsResponsiveOption } from 'echarts';\r\nimport change from '../data/change.json'\r\n\r\n\r\ninterface OverViewProps {\r\n    updataRect: typeof updataRect\r\n}\r\ninterface OverViewState {\r\n    isMonth: boolean,\r\n}\r\nclass OverView extends Component <OverViewProps, OverViewState>{\r\n    private month: string;\r\n    private day: string;\r\n    private station:string;\r\n    private myChart: ECharts | null;\r\n    public constructor(props : OverViewProps) {\r\n        super(props)\r\n        this.month = '1'\r\n        this.day = '1'\r\n        this.station = 'Sta18'\r\n        this.myChart = null;\r\n        this.state = {\r\n            isMonth: true\r\n        }\r\n    }\r\n    \r\n    public render() : JSX.Element {\r\n        // console.log('object', this.props);\r\n        return (\r\n            <div id='over-view'>\r\n                {/* <div className=\"select_time\">\r\n                    <div className=\"static_top left\">\r\n                        <i></i><span>总体概况</span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"con_div_text left\">\r\n                </div> */}\r\n                <div className=\"div_any\">\r\n                    <div id='any1'>\r\n                        <div className=\"div_any_child\">\r\n                            <div className=\"div_any_title\">日历表</div>\r\n                            <Calendar \r\n                                updataRect = {\r\n                                    (month:number, day:number) => {\r\n                                        this.month = '' + month\r\n                                        this.day = '' + day\r\n                                        this.updataRect()\r\n                                        this.updataSankey()\r\n                                    }\r\n                                }\r\n                            />\r\n                        </div>\r\n                        <div className=\"div_any_child rect\">\r\n                            <div className=\"div_any_title\">{(change as any)[this.station]}流量统计图</div>\r\n                            <Rect rectHeight={270}/> \r\n                        </div>\r\n                    </div>\r\n                    <div id='any2'>\r\n                        <div className=\"div_any_child map\">\r\n                            <div className=\"div_any_title\">地铁线路图</div>\r\n                            <SmallMapView changeStation = {\r\n                                (station:string) => {\r\n                                    this.station = station\r\n                                    // console.log('object', station);\r\n                                    this.updataRect()\r\n                                    this.setState({})\r\n                                }\r\n                            }/>\r\n                        </div>\r\n                    </div>\r\n                    <div id='any3'>\r\n                        <div className=\"div_any_child Sankey\">\r\n                            <div className=\"div_any_title\">换线分析图</div>\r\n                            <div id='sankey'>\r\n\r\n                            </div>\r\n                        </div>  \r\n                    </div>\r\n                </div>\r\n                <div id='changeRectTime' onClick={\r\n                    () => {\r\n                        this.setState({isMonth: !this.state.isMonth}, () => {\r\n                            this.updataRect()\r\n                            this.updataSankey()\r\n                        })\r\n                    }\r\n                }>\r\n                    {this.state.isMonth ? '按天统计' : '按月统计'}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    public componentDidMount() : void {\r\n        this.updataRect()\r\n        this.myChart = echarts.init(document.getElementById('sankey') as HTMLDivElement);\r\n        axios.get('http://localhost:3000/data/sankey_month.json').then((res:AxiosResponse<any>) => {\r\n            const options = {\r\n                tooltip: {\r\n                    trigger: 'item',\r\n                    triggerOn: 'mousemove',\r\n                    textStyle: {\r\n                        color: '#fff'\r\n                    },\r\n                    backgroundColor: '#030829',\r\n                },\r\n                series: {\r\n                    type: 'sankey',\r\n                    layout: 'none',\r\n                    bottom: 10,\r\n                    right: 45,\r\n                    top: 0,\r\n                    left: 0,\r\n                    \r\n                    lineStyle: {\r\n                        color: 'source',\r\n                        // curveness: 0.5\r\n                    },\r\n                    label: {\r\n                        color: 'white',\r\n                        fontFamily: 'Arial',\r\n                        fontSize: 10\r\n                    },\r\n                    emphasis: {\r\n                        focus: 'adjacency'\r\n                    },\r\n                    data: res.data['0' + this.month]['data'],\r\n                    links: res.data['0' + this.month]['links'],\r\n                }\r\n            }\r\n            this.myChart?.setOption(options as EChartsResponsiveOption)\r\n        })\r\n    }\r\n\r\n    private updataRect(): void {\r\n        const {updataRect} = this.props\r\n        if (this.station === '') return;\r\n        if (this.state.isMonth) {\r\n            axios.get('http://localhost:3000/data/month_in.json').then((res:AxiosResponse<any>) => {\r\n                const in_data:Array<number> = []\r\n                for (let i = parseInt(this.month); i < 8; i++) {\r\n                    in_data.push(res.data['0' + i][this.station])\r\n                }\r\n                axios.get('http://localhost:3000/data/month_out.json').then((res:AxiosResponse<any>) => {\r\n                    const out_data:Array<number> = []\r\n                    const times:Array<string> = []\r\n                    for (let i = parseInt(this.month); i < 8; i++) {\r\n                        out_data.push(res.data['0' + i][this.station])\r\n                        times.push(i + '月')\r\n                    }\r\n                    updataRect(in_data, out_data, times)\r\n                })\r\n            })\r\n        } else {\r\n            const station = this.station\r\n            axios.get('http://localhost:3000/data/day_in.json').then((resIn:AxiosResponse<any>) => {\r\n                axios.get('http://localhost:3000/data/day_out.json').then((resOut:AxiosResponse<any>) => {\r\n                    const dayIndex = (calendarData as any)[this.month].indexOf(this.day)\r\n                    const in_data:Array<number> = []\r\n                    const out_data:Array<number> = []\r\n                    const times:Array<string> = []\r\n                    for (let i = dayIndex; i < (calendarData as any)[this.month].length; i++) {\r\n                        const d = parseInt((calendarData as any)[this.month][i])\r\n                        in_data.push(resIn.data['0'+this.month][`${d<10?'0'+d:d}`][station] || 0)\r\n                        out_data.push(resOut.data['0'+this.month][`${d<10?'0'+d:d}`][station] || 0)\r\n                        times.push(`${this.month}月${(calendarData as any)[this.month][i]}日`)\r\n                        if (times.length === 7) break\r\n                    }\r\n                    let k = 1\r\n                    while(times.length < 7) {\r\n                        in_data.push(resIn.data['0'+(parseInt(this.month)+1)]['0'+k][station] || 0)\r\n                        out_data.push(resOut.data['0'+(parseInt(this.month)+1)]['0'+k][station] || 0)\r\n                        times.push(`${parseInt(this.month)+1}月${k++}日`)\r\n                    }\r\n                    this.props.updataRect(in_data, out_data, times)\r\n                })\r\n            })\r\n        }\r\n    }\r\n\r\n    private updataSankey(): void {\r\n        const options = {\r\n            tooltip: {\r\n                trigger: 'item',\r\n                triggerOn: 'mousemove',\r\n                textStyle: {\r\n                    color: '#fff'\r\n                },\r\n                backgroundColor: '#030829',\r\n            },\r\n            series: {\r\n                type: 'sankey',\r\n                layout: 'none',\r\n                bottom: 10,\r\n                right: 45,\r\n                top: 0,\r\n                left: 0,\r\n                \r\n                lineStyle: {\r\n                    color: 'source',\r\n                    // curveness: 0.5\r\n                },\r\n                label: {\r\n                    color: 'white',\r\n                    fontFamily: 'Arial',\r\n                    fontSize: 10\r\n                },\r\n                emphasis: {\r\n                    focus: 'adjacency'\r\n                },\r\n                data: [],\r\n                links: [],\r\n            }\r\n        }\r\n        if (this.state.isMonth) {\r\n            axios.get('http://localhost:3000/data/sankey_month.json').then((res:AxiosResponse<any>) => {\r\n                options['series']['data'] = res.data['0' + this.month]['data']\r\n                options['series']['links'] = res.data['0' + this.month]['links'] \r\n                this.myChart?.setOption(options as EChartsResponsiveOption)\r\n            })\r\n        } else {\r\n            axios.get('http://localhost:3000/data/sankey_day.json').then((res:AxiosResponse<any>) => {\r\n                options['series']['data'] = res.data['0' + this.month][`${parseInt(this.day)<10?'0'+this.day:this.day}`]['data']\r\n                options['series']['links'] = res.data['0' + this.month][`${parseInt(this.day)<10?'0'+this.day:this.day}`]['links'] \r\n                this.myChart?.setOption(options as EChartsResponsiveOption)\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    updataRect\r\n}\r\nexport default connect(null, mapDispatchToProps)(OverView);","import {\r\n    CHANGE_LOADING_SHOW, \r\n    UPDATED_RECT\r\n} from './../types/actionType'\r\n\r\n/**\r\n * 改变加载动画的显示状态\r\n * @param isShow 是否加载\r\n */\r\nexport const changeLoadingShow = (isShow:boolean) => ({\r\n    type : CHANGE_LOADING_SHOW,\r\n    isShow\r\n})\r\n/**\r\n * 更新柱状图\r\n * @param data 柱状图数据\r\n * @returns \r\n */\r\nexport const updataRect = (in_data:Array<number>, out_data:Array<number>, times:Array<string>) => ({\r\n    type: UPDATED_RECT,\r\n    in_data,\r\n    out_data,\r\n    times\r\n})\r\n\r\n","import React, {Component} from 'react';\r\nimport '../css/tableView.css'\r\nimport axios, { AxiosResponse } from 'axios'\r\nimport tableSelections from '../data/tableView.json'\r\nimport change from '../data/change.json'\r\n\r\n// import 'bootstrap'\r\n\r\ninterface TableViewProps {\r\n    \r\n}\r\ninterface TableViewState {\r\n    tableData: Array<Array<string>>,\r\n    tableDataBySelect: Array<Array<string>>,\r\n    sum: number,\r\n    pagination: number,\r\n}\r\nclass TableView extends Component <TableViewProps, TableViewState>{\r\n    private inStation:string\r\n    private outStation:string\r\n    private inRoute:string\r\n    private outRoute:string\r\n    private birthyear:string\r\n    private sex:string\r\n    private inTime:string\r\n    private outTime:string\r\n    public constructor(props : TableViewProps) {\r\n        super(props)\r\n        this.inStation = '不限'\r\n        this.outStation = '不限'\r\n        this.inRoute = '不限'\r\n        this.outRoute = '不限'\r\n        this.birthyear = '不限'\r\n        this.sex = '不限'\r\n        this.inTime = ''\r\n        this.outTime = ''\r\n        this.state = {\r\n            tableData: [],\r\n            tableDataBySelect: [],\r\n            sum: 0,\r\n            pagination: 1,\r\n        }\r\n    }\r\n    \r\n    public render() : JSX.Element {\r\n        const theads:Array<string> = ['入站时间', '入站点',  '出站时间', '出站点', '线路', '出生年份', '性别']\r\n        const {sum, pagination} = this.state\r\n        const paginationList:Array<string> = []\r\n        if (sum <= 56) {\r\n            let s = sum, index = 1\r\n            while(s > 0) {\r\n                paginationList.push('' + index)\r\n                s -= 14\r\n                index ++\r\n            }\r\n        } else {\r\n            let index = 1\r\n            while(index < 5) {\r\n                paginationList.push('' + index)\r\n                index ++\r\n            }\r\n            paginationList.push('···')\r\n            paginationList.push((sum / 14 + 0.5).toFixed(0))\r\n        }\r\n        return (\r\n            <div id='table-view'>\r\n                <div id='table-find'>\r\n                    <p style={{\r\n                        marginTop: '4px',\r\n                        textAlign: 'center',\r\n                        fontSize: '23px',\r\n                        color: 'white'\r\n                    }}>\r\n                        站点信息\r\n                    </p>\r\n                    <p>\r\n                        <label>入站点：</label>\r\n                        <select onChange={\r\n                            (e) => {\r\n                                this.inStation = e.target.value\r\n                            }\r\n                        }>\r\n                            {\r\n                                tableSelections['stations'].map((value: string, index: number) => (\r\n                                    <option value={value} key={index}>{(change as any)[value]}</option>\r\n                                ))\r\n                            }\r\n                        </select>\r\n                        <label>入站线路：</label>\r\n                        <select onChange={\r\n                            (e) => {\r\n                                this.inRoute = e.target.value\r\n                            }\r\n                        }>\r\n                            {\r\n                                tableSelections['routes'].map((value: string, index: number) => (\r\n                                    <option value={value} key={index}>{value}</option>\r\n                                ))\r\n                            }\r\n                        </select>\r\n                        <label>出站点：</label>\r\n                        <select onChange={\r\n                            (e) => {\r\n                                this.outStation = e.target.value\r\n                            }\r\n                        }>\r\n                            {\r\n                                tableSelections['stations'].map((value: string, index: number) => (\r\n                                    <option value={value} key={index}>{(change as any)[value]}</option>\r\n                                ))\r\n                            }\r\n                        </select>\r\n                        <label>出站线路：</label>\r\n                        <select onChange={\r\n                            (e) => {\r\n                                this.outRoute = e.target.value\r\n                            }\r\n                        }>\r\n                            {\r\n                                tableSelections['routes'].map((value: string, index: number) => (\r\n                                    <option value={value} key={index}>{value}</option>\r\n                                ))\r\n                            }\r\n                        </select>\r\n                    </p>\r\n                    <p style={{\r\n                        marginTop: '10px',\r\n                        textAlign: 'center',\r\n                        fontSize: '23px',\r\n                        color: 'white'\r\n                    }}>\r\n                        乘客信息\r\n                    </p>\r\n                    <p>\r\n                        <label>出生年份：</label>\r\n                        <select onChange={\r\n                            (e) => {\r\n                                this.birthyear = e.target.value\r\n                            }\r\n                        }>\r\n                            {\r\n                                tableSelections['birthyear'].map((value: string, index: number) => (\r\n                                    <option value={value} key={index}>{value}</option>\r\n                                ))\r\n                            }\r\n                        </select>\r\n                        <label>性别：</label>\r\n                        <select onChange={\r\n                            (e) => {\r\n                                this.sex = e.target.value\r\n                                // this.search()\r\n                            }\r\n                        }>\r\n                            {\r\n                                ['不限', '男', '女'].map((value: string, index: number) => (\r\n                                    <option value={value} key={index}>{value}</option>\r\n                                ))\r\n                            }\r\n                        </select>\r\n                        <label>入站时间：</label>\r\n                        <input type=\"date\"  onChange={\r\n                            (e) => {\r\n                                this.inTime = e.target.value\r\n                            }\r\n                        } />\r\n                        <label>出站时间：</label>\r\n                        <input type=\"date\" onChange={\r\n                            (e) => {\r\n                                this.outTime = e.target.value\r\n                            }\r\n                        } />\r\n                        {/* <button className=\"btn btn-primary btn-sm\"><span className=\"glyphicon glyphicon-search\"></span>查询</button> */}\r\n                    </p>\r\n                </div>\r\n                <div id='search' onClick={\r\n                    () => {\r\n                        this.search()\r\n                    }\r\n                }>\r\n                    查询\r\n                </div>\r\n                <table style={{\r\n                    marginTop: '10px',\r\n                    width: '100%',\r\n                    // height: '300px',\r\n                    padding: '8px',\r\n                    color: '#FFFFff',\r\n                    boxShadow: '-8px 0px 10px #034c6a inset, 8px 0px 10px #034c6a inset',\r\n                    fontSize: '15px',\r\n                    borderSpacing: 0,\r\n\r\n                }}>\r\n                    <thead>\r\n                        <tr>\r\n                            {\r\n                                theads.map((value: string, index: number) => (\r\n                                    <td key={index}>{value}</td>\r\n                                ))\r\n                            }\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {\r\n                            this.state.tableDataBySelect.map((value: string[], index:number) => {\r\n                                if ((pagination-1) * 14 < index + 1 && index + 1 <= 14 * pagination) {\r\n                                    return (\r\n                                        <tr key={index}>\r\n                                            {\r\n                                                value.map((value: string, index: number) => (\r\n                                                    <td key={index}>{value[0] == 'S' ? (value in change ? (change as any)[value]: '潘水') : value}</td>\r\n                                                ))\r\n                                            }\r\n                                        </tr>\r\n                                    )\r\n                                }\r\n                            })\r\n                        }\r\n                    </tbody>\r\n                </table>\r\n                <div style={{\r\n                    display: 'block'\r\n                }}>\r\n                    <div className=\"pull-left pagination-detail\">\r\n                        <span className=\"pagination-info\">显示第 {1 + (pagination - 1) * 14} 到第 {Math.min(pagination * 14, sum)} 条记录，总共 {sum} 条记录</span>\r\n                    </div>\r\n                    <div className=\"pull-right pagination\">\r\n                        <ul className=\"pagination\">\r\n                            <li className=\"page-pre\">\r\n                                <a href=\"javascript:void(0)\" onClick={\r\n                                    (e) => {\r\n                                        if (pagination === 1) return;\r\n                                        e.preventDefault();\r\n                                        this.setState({pagination: pagination-1})\r\n                                    }\r\n                                }>{'<'}</a>\r\n                            </li>\r\n                            {\r\n                                paginationList.map((value: string, index: number) => (\r\n                                    <li className={\"page-number \" + (pagination === parseInt(value) ? 'active' : '')}>\r\n                                        <a href=\"javascript:void(0)\" onClick={\r\n                                            (e) => {\r\n                                                e.preventDefault()\r\n                                                this.setState({pagination: parseInt(value)})\r\n                                            }\r\n                                        }>{value}</a>\r\n                                    </li>\r\n                                ))\r\n                            }\r\n                            {/* <li className=\"page-number active\">\r\n                                <a href=\"javascript:void(0)\">1</a>\r\n                            </li>\r\n                            <li className=\"page-number\">\r\n                                <a href=\"javascript:void(0)\">2</a>\r\n                            </li> */}\r\n                            <li className=\"page-next\">\r\n                                <a href=\"javascript:void(0)\" onClick={\r\n                                    (e) => {\r\n                                        if (pagination * 14 >= sum) return;\r\n                                        e.preventDefault();\r\n                                        this.setState({pagination: pagination+1})\r\n                                    }\r\n                                }>{'>'}</a>\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    public componentDidMount() {\r\n        console.log(tableSelections)\r\n        axios.get('/data/day.json').then((res: AxiosResponse<Array<any>>) => {\r\n\t\t\t// console.log(res.data);\r\n\t\t\tconst {data} = res;\r\n            const tableData:Array<Array<string>> = []\r\n            for (let month in data) {\r\n                for (let day in data[month]) {\r\n                    data[month][day].map((value: any) => {\r\n                        tableData.push([\r\n                            value['in_station_time'],//0\r\n                            value['in_station_name'],//1\r\n                            value['out_station_time'],//2\r\n                            value['out_station_name'],//3\r\n                            value['route'][0] + '->' + value['route'][1],//4\r\n                            value['year_of_birth'],//5\r\n                            value['sex'] === 0 ? '男' : '女'//6\r\n                        ])\r\n                    })\r\n                }\r\n            }\r\n            \r\n            this.setState({tableData, tableDataBySelect: tableData, sum: tableData.length})\r\n\t\t})\r\n    }\r\n\r\n    private search(): void {\r\n        const selections:any = {}\r\n        const tableDataBySelect:Array<Array<string>> = []\r\n        const {tableData} = this.state\r\n        if (this.inStation !== '不限') selections[1] = this.inStation\r\n        if (this.outStation !== '不限') selections[3] = this.outStation\r\n        if (this.inRoute !== '不限') selections['inRoute'] = this.inRoute\r\n        if (this.outRoute !== '不限') selections['outRoute'] = this.outRoute\r\n        if (this.birthyear !== '不限') selections[5] = this.birthyear\r\n        if (this.sex !== '不限') selections[6] = this.sex\r\n        for (let i = 0; i < tableData.length; i ++) {\r\n            let isSame:boolean = true;\r\n            for (let key in selections) {\r\n                if (['inRoute', 'outRoute'].includes(key)) {\r\n                    let arr:Array<string> = (tableData[i] as any)[4].split('->')\r\n                    // console.log(this.inRoute, arr);\r\n                    let index = ['inRoute', 'outRoute'].indexOf(key)\r\n                    if (arr[index] !== selections[key]) {\r\n                        isSame = false\r\n                        break;\r\n                    }\r\n                } else {\r\n                    if ((tableData[i] as any)[key] !== selections[key]) {\r\n                        isSame = false\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            if (isSame) {\r\n                tableDataBySelect.push(tableData[i])\r\n            }\r\n        }\r\n        this.setState({tableDataBySelect, sum:tableDataBySelect.length, pagination: 1})\r\n\r\n\r\n    }\r\n\r\n}\r\nexport default TableView;","import React, {Component} from 'react';\r\nimport  './../css/load.css'\r\nimport {connect} from 'react-redux'\r\nimport { storeType, loadType } from '../types/propsType';\r\n\r\ninterface LoadProps extends loadType {\r\n    \r\n}\r\ninterface LoadState {\r\n    \r\n}\r\nclass Load extends Component <LoadProps, LoadState>{\r\n    public constructor(props : LoadProps) {\r\n        super(props)\r\n    }\r\n    \r\n    public render() : JSX.Element {\r\n        // console.log(this.props.isShow);\r\n        return (\r\n            <div id=\"load\" style={{\r\n                display : this.props.isShow ? 'inline-block' : 'none'\r\n            }}>\r\n                <div className=\"load_img\">\r\n                    <img className=\"jzxz1\" src=\"images/load/jzxz1.png\" alt='' />\r\n                    <img className=\"jzxz2\" src=\"images/load/jzxz2.png\" alt='' />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state:storeType, ownProps?: any) => {\r\n\treturn {\r\n        ...ownProps,\r\n        // ...state.Load\r\n\t}\r\n}\r\nexport default connect(mapStateToProps)(Load);","import React, {Component} from 'react';\r\nimport * as echarts from 'echarts'\r\nimport { ECharts, EChartsResponsiveOption } from 'echarts';\r\n\r\nimport '../css/modelView.css'\r\nimport axios, { AxiosResponse } from 'axios';\r\nimport calendarData from '../data/calendar.json'\r\nimport {stations} from '../data/tableView.json'\r\nimport Load from './load';\r\nimport change from './../data/change.json'\r\n\r\ninterface ModelViewProps {\r\n    \r\n}\r\ninterface ModelViewState {\r\n    station: string,\r\n    isLoading: boolean\r\n}\r\nclass ModelView extends Component <ModelViewProps, ModelViewState>{\r\n    private myChart: ECharts | null;\r\n    private xs: Array<string>;\r\n    private originData: Array<number>\r\n    private modelData: Array<number>\r\n\r\n    public constructor(props : ModelViewProps) {\r\n        super(props)\r\n        this.myChart = null;\r\n        this.xs = []\r\n        this.originData = []\r\n        this.modelData = []\r\n        this.state = {\r\n            station: 'Sta65',\r\n            isLoading: false\r\n        }\r\n\r\n    }\r\n    \r\n    public render() : JSX.Element {\r\n        const activation:Array<string> = ['ReLU', 'sigmoid',  'softmax', 'tanh', 'softplus', 'PReLU']\r\n        const loss:Array<string> = ['均方误差', '交叉熵', '对数似然']\r\n        const weather:Array<string> = ['多云', '小雨', '晴', '中雨', '大雨', '阵雨', '雨夹雪', '阴天', '暴雨']\r\n        return (\r\n            <div id=\"model-view\">\r\n                <div style={{\r\n                    width: '99%',\r\n                    height: '103%',\r\n                    // backgroundColor: 'red',\r\n                    // zIndex: 7\r\n                }} id='lines-view'>\r\n                    \r\n                </div>\r\n                <div style={{\r\n                    position: 'absolute',\r\n                    top: '150px',\r\n                    right: '130px',\r\n                    color: '#fff'\r\n                }}>\r\n                    站点：\r\n                </div>\r\n                <select id=\"select-station\" onChange={\r\n                    (e) => {\r\n                        for (let key in change) {\r\n                            if ((change as any)[key] === e.target.value) {\r\n                                this.setState({station: key}, () => {\r\n                                    this.changeOriginData()\r\n                                })\r\n                                break\r\n                            }\r\n                        }\r\n                            \r\n                    }\r\n                }>\r\n                    {\r\n                        stations.map((value: string, index: number) => {\r\n                            if (index > 0) {\r\n                                return <option>{(change as any)[value]}</option>\r\n                            }\r\n                        })\r\n                    }\r\n                </select>\r\n                <div style={{\r\n                    position: 'absolute',\r\n                    top: '180px',\r\n                    right: '100px',\r\n                    color: '#fff'\r\n                }}>\r\n                    激活函数：\r\n                </div>\r\n                <select id=\"select-station\" style={{\r\n                    top: '182px'\r\n                }}>\r\n                    {\r\n                        activation.map((value: string, index: number) => {\r\n                            if (index > 0) {\r\n                                return <option>{value}</option>\r\n                            }\r\n                        })\r\n                    }\r\n                </select>\r\n                <div style={{\r\n                    position: 'absolute',\r\n                    top: '210px',\r\n                    right: '100px',\r\n                    color: '#fff'\r\n                }}>\r\n                    损失函数：\r\n                </div>\r\n                <select id=\"select-station\" style={{\r\n                    top: '212px'\r\n                }}>\r\n                    {\r\n                        loss.map((value: string, index: number) => {\r\n                            if (index > 0) {\r\n                                return <option>{value}</option>\r\n                            }\r\n                        })\r\n                    }\r\n                </select>\r\n                <div style={{\r\n                    position: 'absolute',\r\n                    top: '240px',\r\n                    right: '100px',\r\n                    color: '#fff'\r\n                }}>\r\n                    天气状况：\r\n                </div>\r\n                <select id=\"select-station\" style={{\r\n                    top: '242px'\r\n                }}>\r\n                    {\r\n                        weather.map((value: string, index: number) => {\r\n                            // if (index > 0) {\r\n                                return <option>{value}</option>\r\n                            // }\r\n                        })\r\n                    }\r\n                </select>\r\n                <div id='model-button' onClick={\r\n                    () => {\r\n                        this.setState({isLoading: true}, () => {\r\n                            setTimeout(() => {\r\n                                this.setState({isLoading: false}, () => {\r\n                                    this.model()\r\n                                })\r\n                            }, 1000)\r\n                        })\r\n                    }\r\n                }>\r\n                    预测\r\n                </div>\r\n                <Load isShow={this.state.isLoading}/>\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n    public componentDidMount(): void {\r\n        for (let month in calendarData) {\r\n            (calendarData[month as '1'] as Array<string>).forEach((day:string) => {\r\n                if (month === '7' && parseInt(day) > 16) return;\r\n                this.xs.push(month + '月' + day + '日')\r\n            })\r\n        }\r\n        this.changeOriginData()\r\n    }\r\n\r\n\r\n    private changeOriginData(): void {\r\n        this.modelData = []\r\n        this.myChart = echarts.init(document.getElementById('lines-view') as HTMLDivElement);\r\n        axios.get('http://localhost:3000/data/linesData.json').then((res:AxiosResponse<any>) => {\r\n            this.originData = res.data[this.state.station]\r\n            const option = {\r\n                title: {\r\n                    text: '客流量统计图',\r\n                    textStyle: {\r\n                        color: 'white'\r\n                    }\r\n                },\r\n                tooltip: {\r\n                    trigger: 'axis',\r\n                    textStyle: {\r\n                        color: '#fff'\r\n                    },\r\n                    backgroundColor: '#61d2f7',\r\n                    // opacity: 0.5\r\n                },\r\n                legend: {\r\n                    data: ['原始', '预测'],\r\n                    textStyle: {\r\n                        color: 'white'\r\n                    }\r\n                    \r\n                },\r\n                toolbox: {\r\n                    show: true,\r\n                    feature: {\r\n                        dataZoom: {\r\n                            yAxisIndex: 'none'\r\n                        },\r\n                        dataView: {readOnly: false},\r\n                        magicType: {type: ['line', 'bar']},\r\n                        restore: {},\r\n                        saveAsImage: {}\r\n                    }\r\n                },\r\n                xAxis: {\r\n                    type: 'category',\r\n                    boundaryGap: false,\r\n                    data: this.xs,\r\n                    axisLabel: {\r\n                        textStyle: {\r\n                            color: 'white'\r\n                        }\r\n                    }\r\n                },\r\n                yAxis: {\r\n                    type: 'value',\r\n                    axisLabel: {\r\n                        textStyle: {\r\n                            color: 'white'\r\n                        }\r\n                    }\r\n                },\r\n                series: [\r\n                    {\r\n                        name: '原始',\r\n                        type: 'line',\r\n                        data: this.originData,\r\n                        lineStyle: {\r\n                            // color: 'white'\r\n                        },\r\n                        // itemStyle: {\r\n                        //     color: 'white'\r\n                        // }\r\n                    },\r\n                    {\r\n                        name: '最低气温',\r\n                        type: 'line',\r\n                        data: this.modelData,\r\n                        // itemStyle: {\r\n                        //     color: 'white'\r\n                        // }\r\n                    }\r\n                ]\r\n            };\r\n            this.myChart?.setOption(option as EChartsResponsiveOption)\r\n        })\r\n    }\r\n    private model(): void {\r\n        this.modelData = []\r\n        this.originData.forEach((value:number, index:number) => {\r\n            if (index > 177) {\r\n                const i = Math.random() >= 0.5 ? 1 : -1\r\n                this.modelData.push(value + i * Math.floor(Math.random() * 15))\r\n                \r\n            } else {\r\n                this.modelData.push(value)\r\n            }\r\n        })\r\n        this.myChart = echarts.init(document.getElementById('lines-view') as HTMLDivElement);\r\n        axios.get('http://localhost:3000/data/linesData.json').then((res:AxiosResponse<any>) => {\r\n            this.originData = res.data[this.state.station]\r\n            const option = {\r\n                title: {\r\n                    text: '客流量统计图',\r\n                    textStyle: {\r\n                        color: 'white'\r\n                    }\r\n                },\r\n                tooltip: {\r\n                    trigger: 'axis',\r\n                    textStyle: {\r\n                        color: '#fff'\r\n                    },\r\n                    backgroundColor: '#61d2f7',\r\n                    // opacity: 0.5\r\n                },\r\n                legend: {\r\n                    data: ['原始', '预测'],\r\n                    textStyle: {\r\n                        color: 'white'\r\n                    }\r\n                    \r\n                },\r\n                toolbox: {\r\n                    show: true,\r\n                    feature: {\r\n                        dataZoom: {\r\n                            yAxisIndex: 'none'\r\n                        },\r\n                        dataView: {readOnly: false},\r\n                        magicType: {type: ['line', 'bar']},\r\n                        restore: {},\r\n                        saveAsImage: {}\r\n                    }\r\n                },\r\n                xAxis: {\r\n                    type: 'category',\r\n                    boundaryGap: false,\r\n                    data: this.xs,\r\n                    axisLabel: {\r\n                        textStyle: {\r\n                            color: 'white'\r\n                        }\r\n                    }\r\n                },\r\n                yAxis: {\r\n                    type: 'value',\r\n                    axisLabel: {\r\n                        textStyle: {\r\n                            color: 'white'\r\n                        }\r\n                    }\r\n                },\r\n                series: [\r\n                    {\r\n                        name: '原始',\r\n                        type: 'line',\r\n                        data: this.originData,\r\n                    },\r\n                    {\r\n                        name: '预测',\r\n                        type: 'line',\r\n                        data: this.modelData\r\n                    }\r\n                ]\r\n            };\r\n            this.myChart?.setOption(option as EChartsResponsiveOption)\r\n        })\r\n    }\r\n}\r\nexport default ModelView;","import React, {Component} from 'react';\r\nimport '../css/login.css'\r\n\r\n\r\ninterface LoginProps {\r\n    \r\n}\r\ninterface LoginState {\r\n    isShow: boolean,\r\n    password: string\r\n}\r\nclass Login extends Component <LoginProps, LoginState>{\r\n    public constructor(props : LoginProps) {\r\n        super(props)\r\n        this.state = {\r\n            isShow: true,\r\n            password: '',\r\n        }\r\n    }\r\n    \r\n    public render() : JSX.Element {\r\n        return (\r\n            <div id='login-view' style={{\r\n                display: this.state.isShow ? 'block' : 'none',\r\n                width: '100%',\r\n                height: '100%',\r\n                position: 'fixed',\r\n                top: 0,\r\n                zIndex: 1,\r\n                background: \"#030829\",\r\n            }}>\r\n                <div id='header'>\r\n                    <div className=\"header_center left\">\r\n                        <h2><strong>地铁大脑—智慧客流可视分析系统</strong></h2>\r\n                        <p className=\"color_font\"><small>Subway Brain-Intelligent passenger flow visual analysis system</small></p>\r\n                    </div>\r\n                </div>\r\n                <div style={{ \r\n                    width: '20%',\r\n                    height: '20%',\r\n                    margin: '250px auto',\r\n                    // backgroundColor: 'white'\r\n                }}>\r\n                    <div style={{\r\n                        width: '100%',\r\n                        textAlign: 'center',\r\n                        fontSize: '30px',\r\n                        color: '#fff'\r\n                    }}>\r\n                        请输入登录密码\r\n                    </div>\r\n                    <div style={{\r\n                        width: '60px',\r\n                        position: 'absolute',\r\n                        top: '430px',\r\n                        left: '720px',\r\n                        // backgroundColor: '#fff1',\r\n                        textAlign: 'center',\r\n                        fontSize: '15px',\r\n                        color: '#fff'\r\n                    }}>\r\n                        用户名：\r\n                    </div>\r\n                    <input type=\"text\" style={{\r\n                        position: 'relative',\r\n                        left: '100px',\r\n                        top: '30px'\r\n                    }}/>\r\n                    <div style={{\r\n                        width: '60px',\r\n                        position: 'absolute',\r\n                        top: '470px',\r\n                        left: '720px',\r\n                        // backgroundColor: '#fff1',\r\n                        textAlign: 'center',\r\n                        fontSize: '15px',\r\n                        color: '#fff'\r\n                    }}>\r\n                        密码：\r\n                    </div>\r\n                    <input type=\"password\" style={{\r\n                        position: 'absolute',\r\n                        left: '772px',\r\n                        top: '470px',\r\n                        width: '172px'\r\n                    }} value={this.state.password} onChange={\r\n                        (e) => {\r\n                            this.setState({password: e.target.value})\r\n                        }\r\n                    } onKeyDown={\r\n                        (e) => {\r\n                            // console.log(e);\r\n                            if (e.code === \"Enter\"){\r\n                                this.login()\r\n                            }\r\n                        }\r\n                    } />\r\n                    <div id='button' onClick={\r\n                        () => {\r\n                            this.login()\r\n                        }\r\n                    }>\r\n                        确定\r\n                    </div>\r\n                </div>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n\r\n    private login() {\r\n        if (this.state.password !== '7758258') {\r\n            this.setState({isShow: false})\r\n        } else {\r\n            alert('密码错误，请重新输入！！！')\r\n            this.setState({password: ''})\r\n        }\r\n    }\r\n}\r\nexport default Login;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux'\r\nimport { \r\n    BrowserRouter as Router, \r\n    Route, \r\n    Link \r\n} from 'react-router-dom'\r\nimport axios, { AxiosResponse } from 'axios'\r\nimport './App.css';\r\nimport { changeLoadingShow } from './action'\r\n\r\nimport MapView from './components/MapView'\r\nimport OverView from './components/OverView';\r\nimport TableView from './components/TableView';\r\nimport ModelView from './components/ModelView';\r\nimport Login from './components/Login';\r\n\r\n\r\n\r\ninterface AppProps {\r\n\tchangeLoadingShow: typeof changeLoadingShow\r\n}\r\ninterface AppState {\r\n\tisLogin: boolean,\r\n\tpath: string\r\n}\r\nclass App extends Component<AppProps, AppState>{\r\n\tpublic constructor(props: AppProps) {\r\n\t\tsuper(props)\r\n\t\tthis.state = {\r\n\t\t\tisLogin: true,\r\n\t\t\tpath: '/'\r\n\t\t}\r\n\t}\r\n\r\n\tpublic render(): JSX.Element {\r\n\t\tconst navs:Array<[string, string]> = [\r\n\t\t\t['/', '数据概览'], \r\n\t\t\t['forecast-model', '预测模型'], \r\n\t\t\t[`/map-view`, '地图界面'], \r\n\t\t\t['table-view', '表格界面']\r\n\t\t]\r\n\t\tconst {path} = this.state\r\n\t\treturn (\r\n\t\t\t<div id='app'>\r\n\t\t\t\t<Router>\r\n\t\t\t\t\t<div id='header'>\r\n\t\t\t\t\t\t<div className='nav'>\r\n\t\t\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tnavs.map((value: [string, string], index: number) => (\r\n\t\t\t\t\t\t\t\t\t\t<li key={index} className={value[0] === path ? 'nav_active' : ''} style={{\r\n\t\t\t\t\t\t\t\t\t\t\tfloat: index < 2 ? 'left' : 'right',\r\n\t\t\t\t\t\t\t\t\t\t\tmargin: index < 2 ? '15px 0px 0px 100px' : '15px 100px 0px 0px'\r\n\t\t\t\t\t\t\t\t\t\t}} onClick={\r\n\t\t\t\t\t\t\t\t\t\t\t() => {\r\n\t\t\t\t\t\t\t\t\t\t\t\tthis.setState({path: value[0]})\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}>\r\n\t\t\t\t\t\t\t\t\t\t\t<i style={{\r\n\t\t\t\t\t\t\t\t\t\t\t\tbackgroundImage: `url(/images/nav_${index + 1}.png)`\r\n\t\t\t\t\t\t\t\t\t\t\t}}></i>\r\n\t\t\t\t\t\t\t\t\t\t\t<Link to={value[0]}>{value[1]}</Link> \r\n\t\t\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t\t))\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"header_center left\">\r\n\t\t\t\t\t\t\t<h2><strong>地铁大脑—智慧客流可视分析系统</strong></h2>\r\n\t\t\t\t\t\t\t<p className=\"color_font\"><small>Subway Brain—Intelligent passenger flow visual analysis system</small></p>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<Route exact path=\"/\" component={OverView}/>\r\n\t\t\t\t\t<Route path=\"/table-view\" component={TableView}/>\r\n\t\t\t\t\t<Route path=\"/forecast-model\" component={ModelView}/>\r\n\t\t\t\t\t<Route path=\"/map-view\" component={MapView}/>\r\n\t\t\t\t</Router>\r\n\t\t\t\t<Login />\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n\r\n\tpublic componentDidMount(): void {\r\n\t\t// this.props.history.replace()\r\n\t\t// console.log(this.props)\r\n\t}\r\n}\r\nconst mapDispatchToProps = {\r\n\tchangeLoadingShow\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(App);\r\n","import {combineReducers} from 'redux'\r\nimport {\r\n    storeType, \r\n    loadType,\r\n    rectType\r\n} from './../types/propsType'\r\nimport {\r\n    CHANGE_LOADING_SHOW, UPDATED_RECT\r\n} from './../types/actionType'\r\n\r\nconst initStore:storeType = {\r\n    Load : {\r\n        isShow : true\r\n    },\r\n    Rect: {\r\n        in_data: [],\r\n        out_data: [],\r\n        times: []\r\n    }\r\n}\r\nconst LoadReducer = (state:loadType = initStore.Load, action:any) => {\r\n    if (action.type === CHANGE_LOADING_SHOW) {\r\n        const {isShow} = action\r\n        // console.log(action)\r\n        return {\r\n            ...state,\r\n            isShow\r\n        }\r\n    }\r\n    return state\r\n}\r\n\r\nconst rectReducer = (state:rectType = initStore.Rect, action:any) => {\r\n    if (action.type === UPDATED_RECT) {\r\n        const {in_data, out_data, times} = action\r\n        // console.log('action :>> ', action);\r\n        return {\r\n            ...state,\r\n            in_data,\r\n            out_data,\r\n            times\r\n        }\r\n    }\r\n    return state\r\n}\r\n\r\nconst combineReducer = combineReducers({\r\n    Load : LoadReducer,\r\n    Rect: rectReducer\r\n})\r\nconst reducer = (state:storeType = initStore, action:any) => {\r\n    const store1:storeType = combineReducer(state, action)\r\n    return store1\r\n}\r\nexport default reducer","import reportWebVitals from './reportWebVitals';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux'\nimport App from './App';\nimport reducer from './reducer'\n\nReactDOM.render(\n\t<Provider store={createStore(reducer)}>\n\t\t<App />\n\t</Provider>,\n\tdocument.getElementById('root')\n);\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}